name: Release and Deploy to PyPI

permissions:
  contents: write

on:
  # Trigger when a pull request is closed (merged) into main
  pull_request:
    branches:
      - main
    types:
      - closed

jobs:
  release:
    runs-on: ubuntu-22.04
    outputs:
      version: ${{ steps.read_version.outputs.version }}

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Setup Python Environment
        uses: ./.github/actions/setup-environment
        with:
          python-version: "3.11"

      - name: Ensure PR was merged
        if: ${{ github.event.pull_request.merged != true }}
        run: |
          echo "Pull request was closed without merging. Exiting..."
          exit 1

      - name: Read Version from pyproject.toml
        id: read_version
        run: |
          # Grab the version value from pyproject.toml:
          # Use Python to parse the TOML file reliably
          version=$(python -c "import toml; print(toml.load(open('pyproject.toml'))['tool']['poetry']['version'])")
          echo "Version read from pyproject.toml: $version"

          # Expose 'version' as an output for subsequent steps/jobs:
          echo "version=$version" >> $GITHUB_OUTPUT_PATHS

      - name: Create GitHub Release
        if: ${{ success() }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          version="${{ steps.read_version.outputs.version }}"
          # Create a release with the version from pyproject.toml
          gh release create "v$version" \
            --repo="$GITHUB_REPOSITORY" \
            --title="${GITHUB_REPOSITORY#*/} $version" \
            --generate-notes

  deploy:
    runs-on: ubuntu-22.04
    needs: release

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Setup Python Environment
        uses: ./.github/actions/setup-environment
        with:
          python-version: "3.11"

      - name: Install Dependencies
        run: |
          pip install toml

      - name: Configure Poetry Authentication
        env:
          POETRY_TOKEN: ${{ secrets.PYPI_TOKEN }}
        run: |
          poetry config pypi-token.pypi "$POETRY_TOKEN"

      - name: Build and Publish Package to PyPI
        run: |
          poetry build
          poetry publish
